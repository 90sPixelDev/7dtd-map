(()=>{"use strict";function t(t){return new Promise((e=>t.requestAnimationFrame(e)))}function e(t,e){const s=t.all.flatMap((t=>{const s=r(t.name,e);return s?{...t,highlightedName:s}:[]}));return t.status=`${s.length} matched prefabs`,s}function s(t,e){const{all:s,blockPrefabIndex:n,blockLabels:a}=t,i=function(t,e,s){return Object.entries(e).reduce(((e,[n,a])=>{const i=r(n,t),l=s[n],o=l&&r(l,t);return i||o?e.concat({name:n,highlightedName:i||n,highlightedLabel:o||l,prefabs:a}):e}),[])}(e,n,a);if(0===i.length)return t.status="No matched blocks",[];const l=function(t){return t.reduce(((t,e)=>{const{name:s,highlightedName:r,highlightedLabel:n}=e;return e.prefabs.forEach((e=>{const a={name:s,highlightedName:r,highlightedLabel:n,count:e.count};t[e.name]=(t[e.name]||[]).concat(a)})),t}),{})}(i);if(0===Object.keys(l).length)return t.status=`No prefabs, ${i.length} matched blocks`,[];const o=s.flatMap((t=>{const e=l[t.name];return e?{...t,matchedBlocks:e}:[]}));return t.status=`${o.length} prefabs, ${i.length} matched blocks`,o}function r(t,e){let s=!1;const r=t.replace(e,(t=>(s=t.length>0,`<mark>${t}</mark>`)));return s?r:null}const n=new Set(["all","prefabsFilterString","blocksFilterString","markCoords","blockPrefabIndex","blockLabels"]),a=new class{constructor(e){this.window=e,this.all=[],this.filtered=[],this.prevFiltered=[],this.filter=null,this.prefabsFilterString="",this.blocksFilterString="",this.markCoords=null,this.blockPrefabIndex={},this.blockLabels={},this.updateListeners=[],this.status="",this.lazyUpdater=function(e,s){let r=null,n=null;return async()=>{r=!0,n||(n=(async()=>{for(;r;)r=!1,await s(),await t(e);n=null})())}}(e,(async()=>this.updateImmediately()))}update(){this.lazyUpdater()}updateImmediately(){var t;!function(t){t.filter?t.filtered=t.filter.func(t,t.filter.pattern):(0===t.all.length?t.status="No prefabs":t.status="All prefabs",t.filtered=t.all)}(this),(t=this).markCoords?t.filtered.forEach((e=>{const s=(r=e,n=t.markCoords,Math.round(Math.sqrt((r.x-n.x)**2+(r.y-n.z)**2)));var r,n;e.dist=s})):t.filtered.forEach((t=>{t.dist=null})),function(t){t.markCoords?t.filtered.sort(((t,e)=>t.dist>e.dist?1:t.dist<e.dist?-1:0)):t.filtered.sort(((t,e)=>t.name>e.name?1:t.name<e.name?-1:0))}(this);const e={status:this.status};this.prevFiltered===this.filtered&&this.prevMarkCoords===this.markCoords||(e.prefabs=this.filtered,this.prevFiltered=this.filtered,this.prevMarkCoords=this.markCoords),this.updateListeners.forEach((t=>t(e)))}set prefabsFilterString(t){const s=t.trim();0===s.length?this.filter=null:this.filter={name:"prefab name",func:e,pattern:new RegExp(s,"i")}}set blocksFilterString(t){const e=t.trim();0===e.length?this.filter=null:this.filter={name:"block name",func:s,pattern:new RegExp(e,"i")}}addUpdateListener(t){this.updateListeners.push(t)}}(self);onmessage=t=>{Object.entries(t.data).forEach((([t,e])=>{n.has(t)?a[t]=e:console.warn("Unknown prop: %s",t)})),a.update()},a.addUpdateListener((t=>postMessage(t)))})();