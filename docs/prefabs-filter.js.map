{"version":3,"sources":["webpack://7dtd-map/./src/lib/lazy-invoker.ts","webpack://7dtd-map/./src/lib/prefabs.ts","webpack://7dtd-map/./src/prefabs-filter.ts","webpack://7dtd-map/webpack/bootstrap","webpack://7dtd-map/webpack/startup"],"names":["waitAnimationFrame","w","Promise","r","requestAnimationFrame","window","asyncFunc","updateRequest","workerPromise","async","filterByPrefabs","prefabs","pattern","results","all","flatMap","prefab","m","matchAndHighlight","name","highlightedName","status","length","filterByBlocks","allPrefabs","blockPrefabIndex","blockLabels","matchedBlocks","Object","entries","reduce","arr","blockName","blockLabel","highlightedLabel","concat","matchBlocks","matchedPrefabBlocks","idx","block","forEach","p","b","count","matchPrefabTypes","keys","blocks","str","regex","isMatched","highlighted","replace","this","filtered","prevFiltered","filter","prefabsFilterString","blocksFilterString","markCoords","updateListeners","lazyUpdater","updateImmediately","map","func","dist","targetCoords","baseCoords","Math","round","sqrt","x","y","z","sort","a","updateData","prevMarkCoords","f","filterString","s","trim","RegExp","push","knownParamNames","Set","self","onmessage","event","data","key","value","has","console","warn","update","addUpdateListener","d","postMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"prefabs-filter.js","sourcesContent":["export default function lazyInvoke(window: any, asyncFunc: any) {\n  let updateRequest = null;\n  let workerPromise: any = null;\n  return async () => {\n    updateRequest = true;\n\n    if (workerPromise) {\n      return;\n    }\n\n    workerPromise = (async () => {\n      /* eslint-disable no-await-in-loop */\n      while (updateRequest) {\n        updateRequest = false;\n        await asyncFunc();\n        await waitAnimationFrame(window);\n      }\n      /* eslint-enable no-await-in-loop */\n      workerPromise = null;\n    })();\n  };\n}\n\nfunction waitAnimationFrame(w: any) {\n  return new Promise((r) => w.requestAnimationFrame(r));\n}\n","import lazy from './lazy-invoker';\nexport default class Prefabs {\n    all: any;\n    blockLabels: any;\n    blockPrefabIndex: any;\n    filter: any;\n    filtered: any;\n    lazyUpdater: any;\n    markCoords: any;\n    prevFiltered: any;\n    prevMarkCoords: any;\n    status: any;\n    updateListeners: any;\n    window: any;\n    constructor(window: any) {\n        this.window = window;\n        this.all = [];\n        this.filtered = [];\n        this.prevFiltered = [];\n        this.filter = null;\n        this.prefabsFilterString = '';\n        this.blocksFilterString = '';\n        this.markCoords = null;\n        this.blockPrefabIndex = {};\n        this.blockLabels = {};\n        this.updateListeners = [];\n        this.status = '';\n        this.lazyUpdater = lazy(window, async () => this.updateImmediately());\n    }\n    update() {\n        this.lazyUpdater();\n    }\n    updateImmediately() {\n        applyFilter(this);\n        updateDist(this);\n        sort(this);\n        const updateData = { status: this.status };\n        if (this.prevFiltered !== this.filtered\n            || this.prevMarkCoords !== this.markCoords) {\n            (updateData as any).prefabs = this.filtered;\n            this.prevFiltered = this.filtered;\n            this.prevMarkCoords = this.markCoords;\n        }\n        this.updateListeners.forEach((f: any) => f(updateData));\n    }\n    set prefabsFilterString(filterString: any) {\n        const s = filterString.trim();\n        if (s.length === 0) {\n            this.filter = null;\n        }\n        else {\n            this.filter = {\n                name: 'prefab name',\n                func: filterByPrefabs,\n                pattern: new RegExp(s, 'i'),\n            };\n        }\n    }\n    set blocksFilterString(filterString: any) {\n        const s = filterString.trim();\n        if (s.length === 0) {\n            this.filter = null;\n        }\n        else {\n            this.filter = {\n                name: 'block name',\n                func: filterByBlocks,\n                pattern: new RegExp(s, 'i'),\n            };\n        }\n    }\n    addUpdateListener(func: any) {\n        this.updateListeners.push(func);\n    }\n}\nfunction applyFilter(prefabs: any) {\n    if (prefabs.filter) {\n        prefabs.filtered = prefabs.filter.func(prefabs, prefabs.filter.pattern);\n    }\n    else {\n        if (prefabs.all.length === 0) {\n            prefabs.status = 'No prefabs';\n        }\n        else {\n            prefabs.status = 'All prefabs';\n        }\n        prefabs.filtered = prefabs.all;\n    }\n}\nfunction updateDist(map: any) {\n    if (map.markCoords) {\n        map.filtered.forEach((p: any) => {\n            const dist = calcDist(p, map.markCoords);\n            p.dist = dist;\n        });\n    }\n    else {\n        map.filtered.forEach((p: any) => {\n            p.dist = null;\n        });\n    }\n}\nfunction sort(prefabs: any) {\n    if (prefabs.markCoords) {\n        prefabs.filtered.sort((a: any, b: any) => {\n            if (a.dist > b.dist)\n                return 1;\n            if (a.dist < b.dist)\n                return -1;\n            return 0;\n        });\n    }\n    else {\n        prefabs.filtered.sort((a: any, b: any) => {\n            if (a.name > b.name)\n                return 1;\n            if (a.name < b.name)\n                return -1;\n            return 0;\n        });\n    }\n}\nfunction filterByPrefabs(prefabs: any, pattern: any) {\n    const results = prefabs.all.flatMap((prefab: any) => {\n        const m = matchAndHighlight(prefab.name, pattern);\n        if (m) {\n            // Clone and add a new field;\n            return { ...prefab, highlightedName: m };\n        }\n        return [];\n    });\n    prefabs.status = `${results.length} matched prefabs`;\n    return results;\n}\nfunction filterByBlocks(prefabs: any, pattern: any) {\n    const { all: allPrefabs, blockPrefabIndex, blockLabels } = prefabs;\n    const matchedBlocks = matchBlocks(pattern, blockPrefabIndex, blockLabels);\n    if (matchedBlocks.length === 0) {\n        prefabs.status = 'No matched blocks';\n        return [];\n    }\n    const matchedPrefabBlocks = matchPrefabTypes(matchedBlocks);\n    if (Object.keys(matchedPrefabBlocks).length === 0) {\n        prefabs.status = `No prefabs, ${matchedBlocks.length} matched blocks`;\n        return [];\n    }\n    const results = allPrefabs.flatMap((prefab: any) => {\n        const blocks = matchedPrefabBlocks[prefab.name];\n        if (!blocks) {\n            return [];\n        }\n        // Clone and add a new field;\n        return { ...prefab, matchedBlocks: blocks };\n    });\n    prefabs.status = `${results.length} prefabs, ${matchedBlocks.length} matched blocks`;\n    return results;\n}\n/**\n  this returned value is a index that indicates what blocks are containded by the prefab.\n\n  retrund value format:\n  {\n    <prefab name 1>: [\n      {\n        name: <block name 1>,\n        count: 10,\n        highlightedName: ...,\n        highlightedLabel: ...\n      },\n      { name: <block name 2>, ... },\n      { name: <block name 3>, ... },\n      ...\n    ],\n    <prefab name 2>: [<blocks>...],\n    <prefab name 3>: [<blocks>...],\n    ...\n  }\n*/\nfunction matchPrefabTypes(matchedBlocks: any) {\n    return matchedBlocks.reduce((idx: any, block: any) => {\n        const { name, highlightedName, highlightedLabel } = block;\n        block.prefabs.forEach((p: any) => {\n            const b = {\n                name, highlightedName, highlightedLabel, count: p.count,\n            };\n            idx[p.name] = (idx[p.name] || []).concat(b);\n        });\n        return idx;\n    }, {});\n}\nfunction matchBlocks(pattern: any, blockPrefabIndex: any, blockLabels: any) {\n    return Object\n        .entries(blockPrefabIndex)\n        .reduce((arr, [blockName, prefabs]) => {\n        const highlightedName = matchAndHighlight(blockName, pattern);\n        const blockLabel = blockLabels[blockName];\n        const highlightedLabel = blockLabel && matchAndHighlight(blockLabel, pattern);\n        if (highlightedName || highlightedLabel) {\n            return arr.concat({\n                // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n                name: blockName,\n                highlightedName: highlightedName || blockName,\n                highlightedLabel: highlightedLabel || blockLabel,\n                prefabs,\n            });\n        }\n        return arr;\n    }, []);\n}\nfunction calcDist(targetCoords: any, baseCoords: any) {\n    return Math.round(Math.sqrt(((targetCoords.x - baseCoords.x) ** 2)\n        + ((targetCoords.y - baseCoords.z) ** 2)));\n}\nfunction matchAndHighlight(str: any, regex: any) {\n    let isMatched = false;\n    const highlighted = str.replace(regex, (m: any) => {\n        isMatched = m.length > 0;\n        return `<mark>${m}</mark>`;\n    });\n    return isMatched ? highlighted : null;\n}\n","/* eslint-env worker */\n/* eslint no-restricted-globals: 1 */\n\nimport Prefabs from './lib/prefabs';\n\nconst knownParamNames = new Set([\n  'all',\n  'prefabsFilterString',\n  'blocksFilterString',\n  'markCoords',\n  'blockPrefabIndex',\n  'blockLabels',\n]);\n\nconst prefabs = new Prefabs(self);\n\nonmessage = (event) => {\n  Object.entries(event.data).forEach(([key, value]) => {\n    if (knownParamNames.has(key)) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      prefabs[key] = value;\n    } else {\n      console.warn('Unknown prop: %s', key);\n    }\n  });\n  prefabs.update();\n};\n\n// @ts-expect-error ts-migrate(2554) FIXME: Expected 2-3 arguments, but got 1.\nprefabs.addUpdateListener((d: any) => postMessage(d));\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(594);\n"],"sourceRoot":""}