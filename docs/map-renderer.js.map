{"version":3,"sources":["webpack://7dtd-map/./src/lib/map.ts","webpack://7dtd-map/./src/lib/throttled-invoker.ts","webpack://7dtd-map/./src/map-renderer.ts","webpack://7dtd-map/webpack/bootstrap","webpack://7dtd-map/webpack/startup"],"names":["markChar","putText","ctx","text","x","z","size","lineWidth","Math","round","strokeStyle","strokeText","fillText","canvas","this","showBiomes","showSplat3","showSplat4","showRad","showPrefabs","biomesImg","splat3Img","splat4Img","radImg","brightness","scale","signSize","prefabs","fontFace","FontFace","load","then","a","fonts","add","markCoords","throttledUpdater","updateImmediately","max","width","height","context","getContext","filter","drawImage","imageSmoothingEnabled","async","map","font","family","fillStyle","textAlign","textBaseline","offsetX","offsetY","charOffsetX","charOffsetY","i","length","prefab","drawPrefabs","drawMark","asyncFunc","updateRequest","workerPromise","Promise","r","requestAnimationFrame","onmessage","event","restParams","data","Object","assign","postMessage","mapSizes","update","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"map-renderer.js","sourcesContent":["import { FontFaceSet } from \"css-font-loading-module\";\nimport throttledInvoker from \"./throttled-invoker\";\n\nconst signChar = \"‚úò\";\nconst markChar = \"üö©Ô∏è\";\n\ndeclare const fonts: FontFaceSet;\n\nexport default class Map {\n  biomesImg: ImageBitmap | null;\n  brightness: string;\n  canvas: OffscreenCanvas;\n  fontFace: Promise<FontFace>;\n  throttledUpdater: () => Promise<void>;\n  markCoords: Coords | null;\n  prefabs: HighlightedPrefab[];\n  radImg: ImageBitmap | null;\n  scale: number;\n  showBiomes: boolean;\n  showPrefabs: boolean;\n  showRad: boolean;\n  showSplat3: boolean;\n  showSplat4: boolean;\n  signSize: number;\n  splat3Img: ImageBitmap | null;\n  splat4Img: ImageBitmap | null;\n\n  constructor(canvas: OffscreenCanvas) {\n    this.canvas = canvas;\n    this.showBiomes = true;\n    this.showSplat3 = true;\n    this.showSplat4 = true;\n    this.showRad = true;\n    this.showPrefabs = true;\n    this.biomesImg = null;\n    this.splat3Img = null;\n    this.splat4Img = null;\n    this.radImg = null;\n    this.brightness = \"100%\";\n    this.scale = 0.1;\n    this.signSize = 200;\n    this.prefabs = [];\n\n    const fontFace = new FontFace(\"Noto Sans\", \"url(NotoEmoji-Regular.ttf)\");\n    fontFace.load().then((a) => fonts.add(a));\n    this.fontFace = fontFace.load();\n    this.markCoords = null;\n\n    this.throttledUpdater = throttledInvoker(() => this.updateImmediately());\n  }\n\n  get width(): number {\n    return Math.max(\n      this.biomesImg ? this.biomesImg.width : 0,\n      this.splat3Img ? this.splat3Img.width : 0,\n      this.splat4Img ? this.splat4Img.width : 0\n    );\n  }\n\n  get height(): number {\n    return Math.max(\n      this.biomesImg ? this.biomesImg.height : 0,\n      this.splat3Img ? this.splat3Img.height : 0,\n      this.splat4Img ? this.splat4Img.height : 0\n    );\n  }\n\n  update(): void {\n    this.throttledUpdater();\n  }\n\n  async updateImmediately(): Promise<void> {\n    this.canvas.width = this.width * this.scale;\n    this.canvas.height = this.height * this.scale;\n\n    const context = this.canvas.getContext(\"2d\");\n    if (!context) return;\n    context.scale(this.scale, this.scale);\n    context.filter = `brightness(${this.brightness})`;\n    if (this.biomesImg && this.showBiomes) {\n      context.drawImage(this.biomesImg, 0, 0, this.width, this.height);\n    }\n    if (this.splat3Img && this.showSplat3) {\n      context.drawImage(this.splat3Img, 0, 0, this.width, this.height);\n    }\n    if (this.splat4Img && this.showSplat4) {\n      context.drawImage(this.splat4Img, 0, 0, this.width, this.height);\n    }\n    context.filter = \"none\";\n    if (this.radImg && this.showRad) {\n      context.imageSmoothingEnabled = false;\n      context.drawImage(this.radImg, 0, 0, this.width, this.height);\n      context.imageSmoothingEnabled = true;\n    }\n    if (this.showPrefabs) {\n      await drawPrefabs(this, context);\n    }\n    if (this.markCoords) {\n      await drawMark(this, context);\n    }\n  }\n}\n\nasync function drawPrefabs(map: Map, ctx: OffscreenCanvasRenderingContext2D) {\n  ctx.font = `${map.signSize}px ${(await map.fontFace).family}`;\n  ctx.fillStyle = \"red\";\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n\n  const offsetX = map.width / 2;\n  const offsetY = map.height / 2;\n\n  const charOffsetX = Math.round(map.signSize * 0.01);\n  const charOffsetY = Math.round(map.signSize * 0.05);\n\n  // Inverted iteration to overwrite signs by higher order prefabs\n  for (let i = map.prefabs.length - 1; i >= 0; i -= 1) {\n    const prefab = map.prefabs[i];\n    const x = offsetX + prefab.x + charOffsetX;\n    // prefab vertical positions are inverted for canvas coodinates\n    const z = offsetY - prefab.z + charOffsetY;\n    putText(ctx, { text: signChar, x, z, size: map.signSize });\n  }\n}\n\nasync function drawMark(map: Map, ctx: OffscreenCanvasRenderingContext2D) {\n  if (!map.markCoords) return;\n\n  ctx.font = `${map.signSize}px ${(await map.fontFace).family}`;\n  ctx.fillStyle = \"red\";\n  ctx.textAlign = \"left\";\n  ctx.textBaseline = \"alphabetic\";\n\n  const offsetX = map.width / 2;\n  const offsetY = map.height / 2;\n  const charOffsetX = -1 * Math.round(map.signSize * 0.32);\n  const charOffsetY = -1 * Math.round(map.signSize * 0.1);\n\n  const x = offsetX + map.markCoords.x + charOffsetX;\n  // prefab vertical positions are inverted for canvas coodinates\n  const z = offsetY - map.markCoords.z + charOffsetY;\n\n  putText(ctx, { text: markChar, x, z, size: map.signSize });\n  ctx.strokeText(markChar, x, z);\n  ctx.fillText(markChar, x, z);\n}\n\ninterface MapSign {\n  text: string;\n  x: number;\n  z: number;\n  size: number;\n}\n\nfunction putText(ctx: OffscreenCanvasRenderingContext2D, { text, x, z, size }: MapSign) {\n  ctx.lineWidth = Math.round(size * 0.2);\n  ctx.strokeStyle = \"rgba(0, 0, 0, 0.8)\";\n  ctx.strokeText(text, x, z);\n\n  ctx.lineWidth = Math.round(size * 0.1);\n  ctx.strokeStyle = \"white\";\n  ctx.strokeText(text, x, z);\n\n  ctx.fillText(text, x, z);\n}\n","export default function throttledInvoker(asyncFunc: () => Promise<void>): () => Promise<void> {\n  let updateRequest = null;\n  let workerPromise: Promise<void> | null = null;\n  return async () => {\n    updateRequest = true;\n\n    if (workerPromise) {\n      return;\n    }\n\n    workerPromise = (async () => {\n      while (updateRequest) {\n        updateRequest = false;\n        await asyncFunc();\n        await waitAnimationFrame();\n      }\n      workerPromise = null;\n    })();\n  };\n}\n\nfunction waitAnimationFrame() {\n  return new Promise((r) => requestAnimationFrame(r));\n}\n","import Map from \"./lib/map\";\n\nexport interface MapRendererInMessage {\n  canvas?: OffscreenCanvas;\n\n  biomesImg?: ImageBitmap;\n  splat3Img?: ImageBitmap;\n  splat4Img?: ImageBitmap;\n  radImg?: ImageBitmap;\n\n  showBiomes?: boolean;\n  showSplat3?: boolean;\n  showSplat4?: boolean;\n  showRad?: boolean;\n  showPrefabs?: boolean;\n\n  brightness?: string;\n  scale?: number;\n  signSize?: number;\n  prefabs?: Prefab[];\n  signChar?: string;\n  markChar?: string;\n  markCoords?: Coords | null;\n}\n\nexport interface MapRendererOutMessage {\n  mapSizes: { width: number; height: number };\n}\n\ndeclare function postMessage(message: MapRendererOutMessage): void;\n\nlet map: Map;\n\nonmessage = (event: { data: MapRendererInMessage }) => {\n  const { canvas, ...restParams } = event.data;\n\n  if (canvas) {\n    if (map) {\n      map.canvas = canvas;\n    } else {\n      map = new Map(canvas);\n    }\n  }\n\n  Object.assign(map, restParams);\n\n  postMessage({\n    mapSizes: {\n      width: map.width,\n      height: map.height,\n    },\n  });\n\n  map.update();\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(496);\n"],"sourceRoot":""}