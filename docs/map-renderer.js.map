{"version":3,"sources":["webpack://7dtd-map/./src/lib/lazy-invoker.ts","webpack://7dtd-map/./src/lib/map.ts","webpack://7dtd-map/./src/map-renderer.ts","webpack://7dtd-map/webpack/bootstrap","webpack://7dtd-map/webpack/startup"],"names":["waitAnimationFrame","w","Promise","r","requestAnimationFrame","window","asyncFunc","updateRequest","workerPromise","async","markChar","putText","ctx","text","x","y","textSize","lineWidth","Math","round","strokeStyle","strokeText","fillText","canvas","this","showBiomes","showSplat3","showSplat4","showRad","showPrefabs","biomesImg","splat3Img","splat4Img","radImg","brightness","scale","signSize","prefabs","fontFace","FontFace","load","then","a","fonts","add","markCoords","lazyUpdater","updateImmediately","max","width","height","context","getContext","filter","drawImage","imageSmoothingEnabled","map","font","family","fillStyle","textAlign","textBaseline","offsetX","offsetY","charOffsetX","charOffsetY","i","length","prefab","drawPrefabs","z","drawMark","knownParamNames","Set","onmessage","event","restParams","data","self","Object","keys","forEach","paramName","has","postMessage","mapSizes","update","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"map-renderer.js","sourcesContent":["export default function lazyInvoke(window: any, asyncFunc: any) {\n  let updateRequest = null;\n  let workerPromise: any = null;\n  return async () => {\n    updateRequest = true;\n\n    if (workerPromise) {\n      return;\n    }\n\n    workerPromise = (async () => {\n      /* eslint-disable no-await-in-loop */\n      while (updateRequest) {\n        updateRequest = false;\n        await asyncFunc();\n        await waitAnimationFrame(window);\n      }\n      /* eslint-enable no-await-in-loop */\n      workerPromise = null;\n    })();\n  };\n}\n\nfunction waitAnimationFrame(w: any) {\n  return new Promise((r) => w.requestAnimationFrame(r));\n}\n","import lazy from './lazy-invoker';\n\nconst signChar = '✘';\nconst markChar = '🚩️';\n\nexport default class Map {\n  biomesImg: any;\n  brightness: any;\n  canvas: any;\n  fontFace: any;\n  lazyUpdater: any;\n  markCoords: any;\n  prefabs: any;\n  radImg: any;\n  scale: any;\n  showBiomes: any;\n  showPrefabs: any;\n  showRad: any;\n  showSplat3: any;\n  showSplat4: any;\n  signSize: any;\n  splat3Img: any;\n  splat4Img: any;\n  window: any;\n  constructor(window: any, canvas: any) {\n    this.window = window;\n    this.canvas = canvas;\n    this.showBiomes = true;\n    this.showSplat3 = true;\n    this.showSplat4 = true;\n    this.showRad = true;\n    this.showPrefabs = true;\n    this.biomesImg = null;\n    this.splat3Img = null;\n    this.splat4Img = null;\n    this.radImg = null;\n    this.brightness = '100%';\n    this.scale = '0.1';\n    this.signSize = 200;\n    this.prefabs = [];\n\n    const fontFace = new window.FontFace('Noto Sans', 'url(NotoEmoji-Regular.ttf)');\n    fontFace.load().then((a: any) => window.fonts.add(a));\n    this.fontFace = fontFace.load();\n\n    // flag\n    this.markCoords = {};\n\n    this.lazyUpdater = lazy(window, () => this.updateImmediately());\n  }\n\n  get width() {\n    return Math.max(\n      this.biomesImg ? this.biomesImg.width : 0,\n      this.splat3Img ? this.splat3Img.width : 0,\n      this.splat4Img ? this.splat4Img.width : 0,\n    );\n  }\n\n  get height() {\n    return Math.max(\n      this.biomesImg ? this.biomesImg.height : 0,\n      this.splat3Img ? this.splat3Img.height : 0,\n      this.splat4Img ? this.splat4Img.height : 0,\n    );\n  }\n\n  update() {\n    this.lazyUpdater();\n  }\n\n  async updateImmediately() {\n    this.canvas.width = this.width * this.scale;\n    this.canvas.height = this.height * this.scale;\n    const context = this.canvas.getContext('2d');\n    context.scale(this.scale, this.scale);\n    context.filter = `brightness(${this.brightness})`;\n    if (this.biomesImg && this.showBiomes) {\n      context.drawImage(this.biomesImg, 0, 0, this.width, this.height);\n    }\n    if (this.splat3Img && this.showSplat3) {\n      context.drawImage(this.splat3Img, 0, 0, this.width, this.height);\n    }\n    if (this.splat4Img && this.showSplat4) {\n      context.drawImage(this.splat4Img, 0, 0, this.width, this.height);\n    }\n    context.filter = 'none';\n    if (this.radImg && this.showRad) {\n      context.imageSmoothingEnabled = false;\n      context.drawImage(this.radImg, 0, 0, this.width, this.height);\n      context.imageSmoothingEnabled = true;\n    }\n    if (this.showPrefabs) {\n      await drawPrefabs(this, context);\n    }\n    if (this.markCoords && this.markCoords.x && this.markCoords.z) {\n      await drawMark(this, context);\n    }\n  }\n}\n\nasync function drawPrefabs(map: any, ctx: any) {\n  ctx.font = `${map.signSize}px ${(await map.fontFace).family}`;\n  ctx.fillStyle = 'red';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n\n  const offsetX = map.width / 2;\n  const offsetY = map.height / 2;\n\n  const charOffsetX = Math.round(map.signSize * 0.01);\n  const charOffsetY = Math.round(map.signSize * 0.05);\n\n  // Inverted iteration to overwrite signs by higher order prefabs\n  for (let i = map.prefabs.length - 1; i >= 0; i -= 1) {\n    const prefab = map.prefabs[i];\n    const x = offsetX + prefab.x + charOffsetX;\n    // prefab vertical positions are inverted for canvas coodinates\n    const y = offsetY - prefab.y + charOffsetY;\n    putText({\n      ctx, text: signChar, x, y, textSize: map.signSize,\n    });\n  }\n}\n\nasync function drawMark(map: any, ctx: any) {\n  ctx.font = `${map.signSize}px ${(await map.fontFace).family}`;\n  ctx.fillStyle = 'red';\n  ctx.textAlign = 'left';\n  ctx.textBaseline = 'alphabetic';\n\n  const offsetX = map.width / 2;\n  const offsetY = map.height / 2;\n  const charOffsetX = -1 * Math.round(map.signSize * 0.32);\n  const charOffsetY = -1 * Math.round(map.signSize * 0.1);\n\n  const x = offsetX + map.markCoords.x + charOffsetX;\n  // prefab vertical positions are inverted for canvas coodinates\n  const y = offsetY - map.markCoords.z + charOffsetY;\n\n  putText({\n    ctx, text: markChar, x, y, textSize: map.signSize,\n  });\n  ctx.strokeText(markChar, x, y);\n  ctx.fillText(markChar, x, y);\n}\n\nfunction putText({\n  ctx,\n  text,\n  x,\n  y,\n  textSize\n}: any) {\n  ctx.lineWidth = Math.round(textSize * 0.2);\n  ctx.strokeStyle = 'rgba(0, 0, 0, 0.8)';\n  ctx.strokeText(text, x, y);\n\n  ctx.lineWidth = Math.round(textSize * 0.1);\n  ctx.strokeStyle = 'white';\n  ctx.strokeText(text, x, y);\n\n  ctx.fillText(text, x, y);\n}\n","/* eslint-env worker */\n/* eslint no-restricted-globals: 1 */\n\nimport Map from './lib/map';\n\nconst knownParamNames = new Set([\n  'biomesImg',\n  'splat3Img',\n  'splat4Img',\n  'radImg',\n  'showBiomes',\n  'showSplat3',\n  'showSplat4',\n  'showRad',\n  'showPrefabs',\n  'brightness',\n  'scale',\n  'signSize',\n  'prefabs',\n  'signChar',\n  'markChar',\n  'markCoords',\n]);\n\nlet map: any;\n\nonmessage = (event) => {\n  const {\n    canvas,\n    ...restParams\n  } = event.data;\n\n  if (canvas) {\n    if (map) {\n      map.canvas = canvas;\n    } else {\n      map = new Map(self, canvas);\n    }\n  }\n\n  Object.keys(restParams).forEach((paramName) => {\n    if (!knownParamNames.has(paramName)) {\n      return;\n    }\n    map[paramName] = restParams[paramName];\n  });\n\n  // @ts-expect-error ts-migrate(2554) FIXME: Expected 2-3 arguments, but got 1.\n  postMessage({\n    mapSizes: {\n      width: map.width,\n      height: map.height,\n    },\n  });\n\n  map.update();\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(496);\n"],"sourceRoot":""}